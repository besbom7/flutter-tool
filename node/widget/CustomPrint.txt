
class MyCustomPrint extends StatefulWidget {
  const MyCustomPrint({super.key});

  @override
  State<MyCustomPrint> createState() => _MyCustomPrintState();
}

class _MyCustomPrintState extends State<MyCustomPrint> {

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    return Scaffold(
      body: CustomPaint(
        //กำหนด size
        size: Size(size.width , size.height),
        //กำหนด custom draw
        painter: CustomDraw(),
      ),
    );
  }
}

class CustomDraw extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    //create print สร้างปากกาสำหรับเอาใว้วาด
    final paint = Paint()
      ..strokeWidth = 10
      ..color = Colors.red
      ..style = PaintingStyle.stroke;

    //การวาดแบบเส้นตรง
    //กำหนดจุดเริ่มต้น และ จุดสิ้นสุด Offset(x,y) , Offset(x,y)
    canvas.drawLine(
      //set start point (x , y)
      Offset(0, size.height * 1 / 2),
      //set end point (x , y)
      Offset(size.width * 1 / 2, size.height * 1 / 2),
      //กำหนด paint หรือปากกาสำหรับวาด
      paint,
    );
    //กำหนดจุดเริ่มต้น และ จุดสิ้นสุด Offset(x,y) , Offset(x,y)
    canvas.drawLine(
      //set start point (x , y)
      Offset(size.width * 1 / 2, size.height * 1 / 2),
      //set end point (x , y)
      Offset(size.width * 1 / 2, size.height * 1 / 4),
      //กำหนด paint หรือปากกาสำหรับวาด
      paint,
    );

    //การวาดแบบสี่เหลี่ยม
    //create start point
    final a = Offset(size.width * 1 / 4, size.height * 1 / 4);
    //create end point
    final b = Offset(size.width * 3 / 4, size.height * 3 / 4);
    //กำหนดจุดเริ่มต้น และ จุดสิ้นสุด Offset(x,y) , Offset(x,y) สามารถเอาเมาส์ไปชี้ที่ function fromPoints จะบอกจุดการวาดว่าจุดเริ่มต้นต้องอยู่ตรงใหน จุดสินสุดจะอยู่ต้องใหน
    final rect = Rect.fromPoints(a, b);
    //draw rect วาดเลยโยม
    canvas.drawRect(rect, paint);

    //การวาดแบบวงกลม
    //กำหนดจุดที่จะวาดลงไป (x,y)
    final c = Offset(size.width * 1 / 2, size.height * 1 / 2);
    //วาดวงกลม (point , ขนาดวงกลม / , paint) สามารถเอาเมาส์ไปชี้ที่ function drawCircle จะบอกจุดการวาดว่าจุดเริ่มต้นต้องอยู่ตรงใหน จุดสินสุดจะอยู่ต้องใหน
    canvas.drawCircle(c, size.width * 1 / 2, paint);

    //การวาดเส้นโค้ง
    //create path เส้น
    final arc1 = Path();
    //กำหนดจุดเริ่มต้น (x,y)
    arc1.moveTo(size.width * 0.2, size.height * 0.2);
    //กำหนดจุดสิ้นสุด (Offset(x,y) , ขนาดความโค้ง , clockwise คือการย้อนกลับของการโค้ง) โดยจะกำหนดการโค้งที่จุดสิ้นสุด
    arc1.arcToPoint(Offset(size.width * 0.8, size.height * 0.2),
        radius: Radius.circular(500), clockwise: false);
    //วาดลงไปเลบ
    canvas.drawPath(arc1, paint);

    //การวาดเส้นโค้ง Exemple 2
    final arc2 = Path();
    arc2.moveTo(size.width * 0.2, size.height * 0.8);
    arc2.arcToPoint(Offset(size.width * 0.8, size.height * 0.8),
        radius: Radius.circular(500));
    canvas.drawPath(arc2, paint);

    //การวาดสามเหลี่ยม
    //create path
    final path = Path();
    //กำหนดจุด ที่1 (x,y)
    path.moveTo(size.width * 1 / 2, size.height * 1 / 4);
    //กำหนดจุด ที่2 (x,y)
    path.lineTo(size.width * 1 / 4, size.height * 3 / 4);
    //กำหนดจุด ที่3 (x,y)
    path.lineTo(size.width * 3 / 4, size.height * 3 / 4);
    //กำหนดจุด ที่4 close ปิดให้ไปยังจุดเริ่มต้น
    path.close();
    // draw from path
    canvas.drawPath(path, paint);

    //การวาดเส้นโค้ง แบบ quadraticBezierTo
    //create path
    final path = new Path();
    //กำหนดจุดเริ่มต้น
    path.lineTo(0, 0);
    //กำหนดการโค้่ง (x1,y1,x2,y2) x1,x2 คือจุดแรกที่จะโค้ง  , x2,y2 จุดสิ้นสุดที่จะโค้ง โดยจะต้องกำหนดจุดเริ่มต้นก่อน คือ  path.lineTo(0, 0); จะประกอบไปด้วย3จุด
    //สามารถเอาเมาส์ไปชี้ที่ function quadraticBezierTo จะบอกจุดการวาดว่าจุดเริ่มต้นต้องอยู่ตรงใหน จุดสินสุดจะอยู่ต้องใหน
    canvas.drawCircle(c, size.width * 1 / 2, paint);
    path.quadraticBezierTo(
        size.width * 1 / 2, size.height * 1 / 2, size.width, 0);
    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    // TODO: implement shouldRepaint
    throw UnimplementedError();
  }
}